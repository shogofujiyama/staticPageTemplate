// ----------------------
// == Site settings
// ----------------------

// Fonts
$font1: Verdana, "Hiragino Kaku Gothic ProN", "ヒラギノ角ゴ ProN W3", Meiryo, "メイリオ", sans-serif;
$font2: "Times New Roman", "游明朝", YuMincho, "ヒラギノ明朝 ProN W3", "Hiragino Mincho ProN", "メイリオ", Meiryo, serif;

$DEV_IMG_PATH:"";
$IMG_PATH:"../img/";

$MIN_W: 1000px;



// =======================
// Tools/Mixins
// Thanks to @sutterlity
// https://github.com/sutter/POPY-Starter-integration-web/blob/master/scss/tools/_mixins.scss
// =======================

// -----------------------
// == Base
// -----------------------

// = Inline-block
// -----------------------------
@mixin inline-block ($haslayout : true){
  display: inline-block;
  vertical-align: middle;
  @if $haslayout == true {
    .lt-ie8 & {
      display: inline;
      zoom: 1;
    }
  }
}

// = Clearfix
// -----------------------------
@mixin clearfix ($haslayout : true) {
  @if $haslayout == true {
    .lt-ie8 & {
      zoom: 1;
    }
  }
  &:before, &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both
  }
}

// = Opacity
// -----------------------------
@mixin opacity($opacity) {
  filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
  opacity: $opacity;

  /* Hack IE6 */
  .lt-ie7 & {
    filter : alpha(opacity=#{round($opacity * 100)});
    zoom: 1;
  }
}

// = Placeholder
// -----------------------------
@mixin placeholder($color : $clr-mixin-placeholder) {
  &::-webkit-input-placeholder {
    color: $color;
  }
  &:-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
}

// = Selection
// -----------------------------
$prefixes: ("-webkit-","-moz-", "");
@mixin selection($color, $background) {
  @each $prefix in $prefixes {
    ::#{$prefix}selection {
      color: $color;
      background: $background;
      text-shadow:none;
    }
  }
}

// = Position
// -----------------------------
@mixin position ($position: relative, $coordinates: 0 0 0 0) {
  @if type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }
  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);
  position: $position;
  @if $top == auto {
    top: $top;
  }
  @else if not(unitless($top)) {
    top: $top;
  }
  @if $right == auto {
    right: $right;
  }
  @else if not(unitless($right)) {
    right: $right;
  }
  @if $bottom == auto {
    bottom: $bottom;
  }
  @else if not(unitless($bottom)) {
    bottom: $bottom;
  }
  @if $left == auto {
    left: $left;
  }
  @else if not(unitless($left)) {
    left: $left;
  }
}

// ----------------------------------------------------------
// == CSS3
// ----------------------------------------------------------

// = Prefixer
// -----------------------------
$prefix-for-webkit:    true !default;
$prefix-for-mozilla:   true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera:     true !default;
$prefix-for-spec:      true !default;

@mixin prefixer ($property, $value, $prefixes) {
  @each $prefix in $prefixes {

    @if $prefix == webkit and $prefix-for-webkit == true {
      -webkit-#{$property}: $value;
    }
    @else if $prefix == moz and $prefix-for-mozilla == true {
      -moz-#{$property}: $value;
    }
    @else if $prefix == ms and $prefix-for-microsoft == true {
      -ms-#{$property}: $value;
    }
    @else if $prefix == o and $prefix-for-opera == true {
      -o-#{$property}: $value;
    }
    @else if $prefix == spec and $prefix-for-spec == true {
      #{$property}: $value;
    }
    @else {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

@mixin disable-prefix-for-all() {
  $prefix-for-webkit:    false;
  $prefix-for-mozilla:   false;
  $prefix-for-microsoft: false;
  $prefix-for-opera:     false;
  $prefix-for-spec:      false;
}

// = Border-radius
// -----------------------------
@mixin border-radius($radius : 5px) {
  @include prefixer(border-radius, $radius, moz spec)
}

@mixin border-top-radius($radius : 5px) {
  @include prefixer(border-top-left-radius, $radius, moz spec);
  @include prefixer(border-top-right-radius, $radius, moz spec);
}

@mixin border-bottom-radius($radius : 5px) {
  @include prefixer(border-bottom-left-radius, $radius, moz spec);
  @include prefixer(border-bottom-right-radius, $radius, moz spec);
}

@mixin border-left-radius($radius : 5px) {
  @include prefixer(border-top-left-radius, $radius, moz spec);
  @include prefixer(border-bottom-left-radius, $radius, moz spec);
}

@mixin border-right-radius($radius : 5px) {
  @include prefixer(border-top-right-radius, $radius, moz spec);
  @include prefixer(border-bottom-right-radius, $radius, moz spec);
}

// = Transition
// -----------------------------
@mixin transition ($transition : all .3s ease-in-out) {
  @include prefixer(transition, $transition, webkit moz ms o spec);
}

// = Box-sizing
// -----------------------------
@mixin box-sizing ($box : border-box) {
  //  content-box | border-box | inherit
  @include prefixer(box-sizing, $box, webkit moz spec);
}

// = Filter
// -----------------------------
@mixin filter (
$filter-1,
$filter-2 : false,
$filter-3 : false,
$filter-4 : false,
$filter-5 : false,
$filter-6 : false,
$filter-7 : false,
$filter-8 : false,
$filter-9 : false,
$filter-10: false
) {
  $filter : compact($filter-1, $filter-2, $filter-3, $filter-4, $filter-5, $filter-6, $filter-7, $filter-8, $filter-9, $filter-10);
  @include prefixer(filter, $filter, webkit moz spec);
}

// = UL
// -----------------------------
@mixin ul-list-inline() {
  list-style: none;
  margin: 0;
  padding: 0;

  li {
    @include inline-block();
  }
}

@mixin reset-ul() {
  list-style: none;
  margin: 0;
  padding: 0;
}


// = Transform
// -----------------------------
@mixin transform($property: none) {
  @include prefixer(transform, $property, webkit moz ms o spec);
}

@mixin transform-origin($axes: 50%) {
  @include prefixer(transform-origin, $axes, webkit moz ms o spec);
}

@mixin transform-style ($style: flat) {
  @include prefixer(transform-style, $style, webkit moz ms o spec);
}

// = Keyframes
// -----------------------------
@mixin keyframes($name) {
  $original-prefix-for-webkit:    $prefix-for-webkit;
  $original-prefix-for-mozilla:   $prefix-for-mozilla;
  $original-prefix-for-microsoft: $prefix-for-microsoft;
  $original-prefix-for-opera:     $prefix-for-opera;
  $original-prefix-for-spec:      $prefix-for-spec;

  @if $original-prefix-for-webkit {
    @include disable-prefix-for-all();
    $prefix-for-webkit: true;
    @-webkit-keyframes #{$name} {
      @content;
    }
  }
  @if $original-prefix-for-mozilla {
    @include disable-prefix-for-all();
    $prefix-for-mozilla: true;
    @-moz-keyframes #{$name} {
      @content;
    }
  }
  @if $original-prefix-for-spec {
    @include disable-prefix-for-all();
    $prefix-for-spec: true;
    @keyframes #{$name} {
      @content;
    }
  }

  $prefix-for-webkit:    $original-prefix-for-webkit   ;
  $prefix-for-mozilla:   $original-prefix-for-mozilla  ;
  $prefix-for-microsoft: $original-prefix-for-microsoft;
  $prefix-for-opera:     $original-prefix-for-opera    ;
  $prefix-for-spec:      $original-prefix-for-spec     ;
}

// = Calc
// -----------------------------
@mixin calc($property, $expression) {
  #{$property}: -moz-calc(#{$expression});
  #{$property}: -o-calc(#{$expression});
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

@mixin sprite($isParent, $map, $map-item: foo) {
  @if $isParent == "parent" {
    background-image: sprite-url($map);
    background-repeat: no-repeat;
  } @else {
    $position-x: round(nth(sprite-position($map, $map-item), 1));
    width: round(image-width(sprite-file($map, $map-item)));
    height: round(image-height(sprite-file($map, $map-item)));
    background-position: $position-x 0;
  }
}



// -----------------------
// == Custom Mixin
// -----------------------

@mixin hdaccel($backface: true, $z: false, $persepective: false, $translate3d: false) {

  @if $backface == true {
    -webkit-backface-visibility: hidden;
  }

  @if $z == true {
    -webkit-transform: translateZ(0);
  }

  @if $persepective == true {
    -webkit-perspective: 1000;
  }

  @if $translate3d == true {

    -webkit-transform: translate3d(0px, 0px, 0px);

  }

}

@mixin nosel() {
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -webkit-user-drag: none;
  -khtml-user-drag: none;
}

@mixin fontsize($size: 24, $base: 16) {
  font-size: $size + px;
  font-size: ($size / $base) * 1rem;
}

@mixin hoverTimeBase($property: opacity, $time: 0.4s, $easing: ease-out) {

  @include transition-property($property);
  @include transition-duration($time);
  @include transition-timing-function($easing);
}

@mixin hoverTxt($color: #cccccc) {

  a {
    @include hoverTimeBase(color);
  }

  a:hover {
    color: $color;
  }
}

@mixin hoverOpacity($def: 1, $ov: 0.8) {
  & > a {
    display: block;
    @include hoverTimeBase(opacity);
    @include opacity($def);
  }

  & > a:hover {
    @include hoverTimeBase(opacity, 0.1s);
    @include opacity($ov);
  }
}

@mixin hoverRgba($def: 1, $ov: 0.7) {
  a {
    display: block;
    @include hoverTimeBase(background);
    @include rgba-background-inline(rgba(0, 0, 0, $def));
  }

  a:hover {
    @include rgba-background-inline(rgba(0, 0, 0, $ov));
  }
}

@mixin onMouseSprite($fileName, $hover_class: null) {
  width: image-width($DEV_IMG_PATH + $fileName);
  height: image-height($DEV_IMG_PATH + $fileName) / 2;
  background: url($IMG_PATH + $fileName) no-repeat 0 0;

  @if ($hover_class) {
    &#{$hover_class} {
      background-position: #{0} -1 * image-height($DEV_IMG_PATH + $fileName) / 2;
    }
  } @else {
    &:hover {
      background-position: #{0} -1 * image-height($DEV_IMG_PATH + $fileName) / 2;
    }
  }
}

@mixin bgImage($fileName, $hasW: true, $hasH: true, $repeat: no-repeat, $bgPos: 0 0, $basepath: $DEV_IMG_PATH) {
  @if ($hasW == true) {
    width: image-width($basepath + $fileName);
  }
  @if ($hasH == true) {
    height: image-height($basepath + $fileName);
  }
  background: url($IMG_PATH + $fileName) $repeat $bgPos;
}

@mixin ellipsisTxt() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  width: 100%;
}

@mixin antiAlias($opacity: 0.5) {
  text-shadow: 0 0 2px rgba(150, 150, 150, $opacity)
}

%borderBox {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;

  * {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  }
}

%noTransition {
  -webkit-transition: none;
  -moz-transition: none;
  -o-transition: none;
  -ms-transition: none;
  transition: none;
}

// =======================
// Tools/Functions
// Thanks to @sutterlity
// https://github.com/sutter/POPY-Starter-integration-web/blob/master/scss/tools/_fonctions.scss
// =======================

// Convert px to em
@function pxtoem($target, $context){
  @return ($target/$context)+0em;
}

// Convert em to px
@function emtopx($target, $context){
  @return ($target*$context)+0px;
}